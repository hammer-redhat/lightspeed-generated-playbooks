---
- name: Retrieve Credentials from CyberArk Static Safe
  hosts: localhost
  gather_facts: false
  collections:
    - cyberark.pas

  vars:
    cyberark_pvwa_url: "https://pvwa.example.com"
    static_safe_name: "ProductionServers"
    account_username: "db_admin"
    account_address: "database.example.com"

  tasks:
    - name: Authenticate to CyberArk Vault
      cyberark_authentication:
        api_base_url: "{{ cyberark_pvwa_url }}"
        username: "{{ lookup('env', 'CYBERARK_USER') }}"
        password: "{{ lookup('env', 'CYBERARK_PASS') }}"
        use_shared_logon_authentication: false
      register: cyberark_session
      no_log: true

    - name: Retrieve account from static safe
      cyberark_account:
        api_base_url: "{{ cyberark_pvwa_url }}"
        cyberark_session: "{{ cyberark_session }}"
        state: retrieve
        safe: "{{ static_safe_name }}"
        username: "{{ account_username }}"
        address: "{{ account_address }}"
      register: safe_account
      no_log: true

    - name: Store retrieved credentials as facts
      set_fact:
        db_username: "{{ safe_account.result.userName }}"
        db_password: "{{ safe_account.result.secret }}"
        db_host: "{{ safe_account.result.address }}"
      no_log: true

    - name: Use credentials for database connection
      ansible.builtin.debug:
        msg: "Successfully retrieved credentials for {{ db_username }}@{{ db_host }}"

    # Example: Use credentials with another task
    - name: Test database connectivity
      ansible.builtin.command:
        cmd: "mysql -h {{ db_host }} -u {{ db_username }} -p{{ db_password }} -e 'SELECT 1'"
      register: db_test
      no_log: true
      ignore_errors: true
      when: false  # Set to true to actually run this

    - name: Logoff from CyberArk
      uri:
        url: "{{ cyberark_pvwa_url }}/PasswordVault/API/Auth/Logoff"
        method: POST
        headers:
          Authorization: "{{ cyberark_session.cyberark_session.token }}"
        validate_certs: true
        status_code: [200, 204]
      when: cyberark_session is defined

---
# Alternative: Using CCP (Central Credential Provider)
- name: Retrieve Credentials via CCP
  hosts: localhost
  gather_facts: false
  collections:
    - cyberark.pas

  vars:
    cyberark_ccp_url: "https://pvwa.example.com/AIMWebService"
    cyberark_app_id: "AnsibleAutomation"
    static_safe_name: "ProductionServers"

  tasks:
    - name: Retrieve credentials from static safe using CCP
      cyberark_credential:
        api_base_url: "{{ cyberark_ccp_url }}"
        app_id: "{{ cyberark_app_id }}"
        query: "Safe={{ static_safe_name }};UserName=db_admin;Address=database.example.com"
        validate_certs: true
      register: ccp_credentials
      no_log: true

    - name: Extract credentials from CCP response
      set_fact:
        retrieved_username: "{{ ccp_credentials.result.UserName }}"
        retrieved_password: "{{ ccp_credentials.result.Content }}"
        retrieved_address: "{{ ccp_credentials.result.Address }}"
        safe_name: "{{ ccp_credentials.result.Safe }}"
      no_log: true

    - name: Display safe information (credentials masked)
      debug:
        msg: "Retrieved credentials from safe: {{ safe_name }}"

    - name: Use CyberArk credentials in subsequent automation
      debug:
        msg: "Credentials ready for use in automation tasks"

